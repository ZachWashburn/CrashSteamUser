// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encrypted_app_ticket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_encrypted_5fapp_5fticket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_encrypted_5fapp_5fticket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_encrypted_5fapp_5fticket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_encrypted_5fapp_5fticket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_encrypted_5fapp_5fticket_2eproto;
class EncryptedAppTicket;
class EncryptedAppTicketDefaultTypeInternal;
extern EncryptedAppTicketDefaultTypeInternal _EncryptedAppTicket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EncryptedAppTicket* Arena::CreateMaybeMessage<::EncryptedAppTicket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EncryptedAppTicket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EncryptedAppTicket) */ {
 public:
  inline EncryptedAppTicket() : EncryptedAppTicket(nullptr) {}
  virtual ~EncryptedAppTicket();

  EncryptedAppTicket(const EncryptedAppTicket& from);
  EncryptedAppTicket(EncryptedAppTicket&& from) noexcept
    : EncryptedAppTicket() {
    *this = ::std::move(from);
  }

  inline EncryptedAppTicket& operator=(const EncryptedAppTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedAppTicket& operator=(EncryptedAppTicket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptedAppTicket& default_instance();

  static inline const EncryptedAppTicket* internal_default_instance() {
    return reinterpret_cast<const EncryptedAppTicket*>(
               &_EncryptedAppTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EncryptedAppTicket& a, EncryptedAppTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedAppTicket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedAppTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptedAppTicket* New() const final {
    return CreateMaybeMessage<EncryptedAppTicket>(nullptr);
  }

  EncryptedAppTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptedAppTicket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptedAppTicket& from);
  void MergeFrom(const EncryptedAppTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedAppTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EncryptedAppTicket";
  }
  protected:
  explicit EncryptedAppTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_encrypted_5fapp_5fticket_2eproto);
    return ::descriptor_table_encrypted_5fapp_5fticket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedTicketFieldNumber = 5,
    kTicketVersionNoFieldNumber = 1,
    kCrcEncryptedticketFieldNumber = 2,
    kCbEncrypteduserdataFieldNumber = 3,
    kCbEncryptedAppownershipticketFieldNumber = 4,
  };
  // optional bytes encrypted_ticket = 5;
  bool has_encrypted_ticket() const;
  private:
  bool _internal_has_encrypted_ticket() const;
  public:
  void clear_encrypted_ticket();
  const std::string& encrypted_ticket() const;
  void set_encrypted_ticket(const std::string& value);
  void set_encrypted_ticket(std::string&& value);
  void set_encrypted_ticket(const char* value);
  void set_encrypted_ticket(const void* value, size_t size);
  std::string* mutable_encrypted_ticket();
  std::string* release_encrypted_ticket();
  void set_allocated_encrypted_ticket(std::string* encrypted_ticket);
  private:
  const std::string& _internal_encrypted_ticket() const;
  void _internal_set_encrypted_ticket(const std::string& value);
  std::string* _internal_mutable_encrypted_ticket();
  public:

  // optional uint32 ticket_version_no = 1;
  bool has_ticket_version_no() const;
  private:
  bool _internal_has_ticket_version_no() const;
  public:
  void clear_ticket_version_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 ticket_version_no() const;
  void set_ticket_version_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ticket_version_no() const;
  void _internal_set_ticket_version_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crc_encryptedticket = 2;
  bool has_crc_encryptedticket() const;
  private:
  bool _internal_has_crc_encryptedticket() const;
  public:
  void clear_crc_encryptedticket();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_encryptedticket() const;
  void set_crc_encryptedticket(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc_encryptedticket() const;
  void _internal_set_crc_encryptedticket(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cb_encrypteduserdata = 3;
  bool has_cb_encrypteduserdata() const;
  private:
  bool _internal_has_cb_encrypteduserdata() const;
  public:
  void clear_cb_encrypteduserdata();
  ::PROTOBUF_NAMESPACE_ID::uint32 cb_encrypteduserdata() const;
  void set_cb_encrypteduserdata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cb_encrypteduserdata() const;
  void _internal_set_cb_encrypteduserdata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cb_encrypted_appownershipticket = 4;
  bool has_cb_encrypted_appownershipticket() const;
  private:
  bool _internal_has_cb_encrypted_appownershipticket() const;
  public:
  void clear_cb_encrypted_appownershipticket();
  ::PROTOBUF_NAMESPACE_ID::uint32 cb_encrypted_appownershipticket() const;
  void set_cb_encrypted_appownershipticket(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cb_encrypted_appownershipticket() const;
  void _internal_set_cb_encrypted_appownershipticket(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:EncryptedAppTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_ticket_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ticket_version_no_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_encryptedticket_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cb_encrypteduserdata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cb_encrypted_appownershipticket_;
  friend struct ::TableStruct_encrypted_5fapp_5fticket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EncryptedAppTicket

// optional uint32 ticket_version_no = 1;
inline bool EncryptedAppTicket::_internal_has_ticket_version_no() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EncryptedAppTicket::has_ticket_version_no() const {
  return _internal_has_ticket_version_no();
}
inline void EncryptedAppTicket::clear_ticket_version_no() {
  ticket_version_no_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedAppTicket::_internal_ticket_version_no() const {
  return ticket_version_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedAppTicket::ticket_version_no() const {
  // @@protoc_insertion_point(field_get:EncryptedAppTicket.ticket_version_no)
  return _internal_ticket_version_no();
}
inline void EncryptedAppTicket::_internal_set_ticket_version_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ticket_version_no_ = value;
}
inline void EncryptedAppTicket::set_ticket_version_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ticket_version_no(value);
  // @@protoc_insertion_point(field_set:EncryptedAppTicket.ticket_version_no)
}

// optional uint32 crc_encryptedticket = 2;
inline bool EncryptedAppTicket::_internal_has_crc_encryptedticket() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EncryptedAppTicket::has_crc_encryptedticket() const {
  return _internal_has_crc_encryptedticket();
}
inline void EncryptedAppTicket::clear_crc_encryptedticket() {
  crc_encryptedticket_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedAppTicket::_internal_crc_encryptedticket() const {
  return crc_encryptedticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedAppTicket::crc_encryptedticket() const {
  // @@protoc_insertion_point(field_get:EncryptedAppTicket.crc_encryptedticket)
  return _internal_crc_encryptedticket();
}
inline void EncryptedAppTicket::_internal_set_crc_encryptedticket(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  crc_encryptedticket_ = value;
}
inline void EncryptedAppTicket::set_crc_encryptedticket(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc_encryptedticket(value);
  // @@protoc_insertion_point(field_set:EncryptedAppTicket.crc_encryptedticket)
}

// optional uint32 cb_encrypteduserdata = 3;
inline bool EncryptedAppTicket::_internal_has_cb_encrypteduserdata() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EncryptedAppTicket::has_cb_encrypteduserdata() const {
  return _internal_has_cb_encrypteduserdata();
}
inline void EncryptedAppTicket::clear_cb_encrypteduserdata() {
  cb_encrypteduserdata_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedAppTicket::_internal_cb_encrypteduserdata() const {
  return cb_encrypteduserdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedAppTicket::cb_encrypteduserdata() const {
  // @@protoc_insertion_point(field_get:EncryptedAppTicket.cb_encrypteduserdata)
  return _internal_cb_encrypteduserdata();
}
inline void EncryptedAppTicket::_internal_set_cb_encrypteduserdata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  cb_encrypteduserdata_ = value;
}
inline void EncryptedAppTicket::set_cb_encrypteduserdata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cb_encrypteduserdata(value);
  // @@protoc_insertion_point(field_set:EncryptedAppTicket.cb_encrypteduserdata)
}

// optional uint32 cb_encrypted_appownershipticket = 4;
inline bool EncryptedAppTicket::_internal_has_cb_encrypted_appownershipticket() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EncryptedAppTicket::has_cb_encrypted_appownershipticket() const {
  return _internal_has_cb_encrypted_appownershipticket();
}
inline void EncryptedAppTicket::clear_cb_encrypted_appownershipticket() {
  cb_encrypted_appownershipticket_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedAppTicket::_internal_cb_encrypted_appownershipticket() const {
  return cb_encrypted_appownershipticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedAppTicket::cb_encrypted_appownershipticket() const {
  // @@protoc_insertion_point(field_get:EncryptedAppTicket.cb_encrypted_appownershipticket)
  return _internal_cb_encrypted_appownershipticket();
}
inline void EncryptedAppTicket::_internal_set_cb_encrypted_appownershipticket(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  cb_encrypted_appownershipticket_ = value;
}
inline void EncryptedAppTicket::set_cb_encrypted_appownershipticket(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cb_encrypted_appownershipticket(value);
  // @@protoc_insertion_point(field_set:EncryptedAppTicket.cb_encrypted_appownershipticket)
}

// optional bytes encrypted_ticket = 5;
inline bool EncryptedAppTicket::_internal_has_encrypted_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EncryptedAppTicket::has_encrypted_ticket() const {
  return _internal_has_encrypted_ticket();
}
inline void EncryptedAppTicket::clear_encrypted_ticket() {
  encrypted_ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncryptedAppTicket::encrypted_ticket() const {
  // @@protoc_insertion_point(field_get:EncryptedAppTicket.encrypted_ticket)
  return _internal_encrypted_ticket();
}
inline void EncryptedAppTicket::set_encrypted_ticket(const std::string& value) {
  _internal_set_encrypted_ticket(value);
  // @@protoc_insertion_point(field_set:EncryptedAppTicket.encrypted_ticket)
}
inline std::string* EncryptedAppTicket::mutable_encrypted_ticket() {
  // @@protoc_insertion_point(field_mutable:EncryptedAppTicket.encrypted_ticket)
  return _internal_mutable_encrypted_ticket();
}
inline const std::string& EncryptedAppTicket::_internal_encrypted_ticket() const {
  return encrypted_ticket_.Get();
}
inline void EncryptedAppTicket::_internal_set_encrypted_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EncryptedAppTicket::set_encrypted_ticket(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_ticket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:EncryptedAppTicket.encrypted_ticket)
}
inline void EncryptedAppTicket::set_encrypted_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encrypted_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:EncryptedAppTicket.encrypted_ticket)
}
inline void EncryptedAppTicket::set_encrypted_ticket(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:EncryptedAppTicket.encrypted_ticket)
}
inline std::string* EncryptedAppTicket::_internal_mutable_encrypted_ticket() {
  _has_bits_[0] |= 0x00000001u;
  return encrypted_ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EncryptedAppTicket::release_encrypted_ticket() {
  // @@protoc_insertion_point(field_release:EncryptedAppTicket.encrypted_ticket)
  if (!_internal_has_encrypted_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encrypted_ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EncryptedAppTicket::set_allocated_encrypted_ticket(std::string* encrypted_ticket) {
  if (encrypted_ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:EncryptedAppTicket.encrypted_ticket)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_encrypted_5fapp_5fticket_2eproto
