// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsystemmsgs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gcsystemmsgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgGCHVacVerificationChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCHVacVerificationChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCHAccountPhoneNumberChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCHAccountPhoneNumberChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCHInviteUserToLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCHInviteUserToLobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCHRecurringSubscriptionStatusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCHRecurringSubscriptionStatusChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CQuest_PublisherAddCommunityItemsToPlayer_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CQuest_PublisherAddCommunityItemsToPlayer_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CQuest_PublisherAddCommunityItemsToPlayer_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CQuest_PublisherAddCommunityItemsToPlayer_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_GamePersonalDataCategoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_GamePersonalDataCategoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataCategories_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_GetGamePersonalDataCategories_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataCategories_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_GetGamePersonalDataCategories_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataEntries_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_GetGamePersonalDataEntries_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataEntries_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_GetGamePersonalDataEntries_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_TerminateGamePersonalDataEntries_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_TerminateGamePersonalDataEntries_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCSystemMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESOMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCBaseClientMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCToGCMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECommunityItemClass_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECommunityItemAttribute_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gcsystemmsgs_2eproto() {
  protobuf_AddDesc_gcsystemmsgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gcsystemmsgs.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgGCHVacVerificationChange_descriptor_ = file->message_type(0);
  static const int CMsgGCHVacVerificationChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, is_verified_),
  };
  CMsgGCHVacVerificationChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCHVacVerificationChange_descriptor_,
      CMsgGCHVacVerificationChange::default_instance_,
      CMsgGCHVacVerificationChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCHVacVerificationChange));
  CMsgGCHAccountPhoneNumberChange_descriptor_ = file->message_type(1);
  static const int CMsgGCHAccountPhoneNumberChange_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, phone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, is_verified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, is_identifying_),
  };
  CMsgGCHAccountPhoneNumberChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCHAccountPhoneNumberChange_descriptor_,
      CMsgGCHAccountPhoneNumberChange::default_instance_,
      CMsgGCHAccountPhoneNumberChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCHAccountPhoneNumberChange));
  CMsgGCHInviteUserToLobby_descriptor_ = file->message_type(2);
  static const int CMsgGCHInviteUserToLobby_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, steamid_invited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, steamid_lobby_),
  };
  CMsgGCHInviteUserToLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCHInviteUserToLobby_descriptor_,
      CMsgGCHInviteUserToLobby::default_instance_,
      CMsgGCHInviteUserToLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCHInviteUserToLobby));
  CMsgGCHRecurringSubscriptionStatusChange_descriptor_ = file->message_type(3);
  static const int CMsgGCHRecurringSubscriptionStatusChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHRecurringSubscriptionStatusChange, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHRecurringSubscriptionStatusChange, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHRecurringSubscriptionStatusChange, agreementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHRecurringSubscriptionStatusChange, active_),
  };
  CMsgGCHRecurringSubscriptionStatusChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCHRecurringSubscriptionStatusChange_descriptor_,
      CMsgGCHRecurringSubscriptionStatusChange::default_instance_,
      CMsgGCHRecurringSubscriptionStatusChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHRecurringSubscriptionStatusChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHRecurringSubscriptionStatusChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCHRecurringSubscriptionStatusChange));
  CQuest_PublisherAddCommunityItemsToPlayer_Request_descriptor_ = file->message_type(4);
  static const int CQuest_PublisherAddCommunityItemsToPlayer_Request_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, match_item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, match_item_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, prefix_item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, note_),
  };
  CQuest_PublisherAddCommunityItemsToPlayer_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CQuest_PublisherAddCommunityItemsToPlayer_Request_descriptor_,
      CQuest_PublisherAddCommunityItemsToPlayer_Request::default_instance_,
      CQuest_PublisherAddCommunityItemsToPlayer_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Request));
  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_descriptor_ = CQuest_PublisherAddCommunityItemsToPlayer_Request_descriptor_->nested_type(0);
  static const int CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, value_),
  };
  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_descriptor_,
      CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::default_instance_,
      CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute));
  CQuest_PublisherAddCommunityItemsToPlayer_Response_descriptor_ = file->message_type(5);
  static const int CQuest_PublisherAddCommunityItemsToPlayer_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, items_matched_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, items_granted_),
  };
  CQuest_PublisherAddCommunityItemsToPlayer_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CQuest_PublisherAddCommunityItemsToPlayer_Response_descriptor_,
      CQuest_PublisherAddCommunityItemsToPlayer_Response::default_instance_,
      CQuest_PublisherAddCommunityItemsToPlayer_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Response));
  CCommunity_GamePersonalDataCategoryInfo_descriptor_ = file->message_type(6);
  static const int CCommunity_GamePersonalDataCategoryInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, localization_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, template_file_),
  };
  CCommunity_GamePersonalDataCategoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_GamePersonalDataCategoryInfo_descriptor_,
      CCommunity_GamePersonalDataCategoryInfo::default_instance_,
      CCommunity_GamePersonalDataCategoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_GamePersonalDataCategoryInfo));
  CCommunity_GetGamePersonalDataCategories_Request_descriptor_ = file->message_type(7);
  static const int CCommunity_GetGamePersonalDataCategories_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Request, appid_),
  };
  CCommunity_GetGamePersonalDataCategories_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_GetGamePersonalDataCategories_Request_descriptor_,
      CCommunity_GetGamePersonalDataCategories_Request::default_instance_,
      CCommunity_GetGamePersonalDataCategories_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_GetGamePersonalDataCategories_Request));
  CCommunity_GetGamePersonalDataCategories_Response_descriptor_ = file->message_type(8);
  static const int CCommunity_GetGamePersonalDataCategories_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, app_assets_basename_),
  };
  CCommunity_GetGamePersonalDataCategories_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_GetGamePersonalDataCategories_Response_descriptor_,
      CCommunity_GetGamePersonalDataCategories_Response::default_instance_,
      CCommunity_GetGamePersonalDataCategories_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_GetGamePersonalDataCategories_Response));
  CCommunity_GetGamePersonalDataEntries_Request_descriptor_ = file->message_type(9);
  static const int CCommunity_GetGamePersonalDataEntries_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, continue_token_),
  };
  CCommunity_GetGamePersonalDataEntries_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_GetGamePersonalDataEntries_Request_descriptor_,
      CCommunity_GetGamePersonalDataEntries_Request::default_instance_,
      CCommunity_GetGamePersonalDataEntries_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_GetGamePersonalDataEntries_Request));
  CCommunity_GetGamePersonalDataEntries_Response_descriptor_ = file->message_type(10);
  static const int CCommunity_GetGamePersonalDataEntries_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, gceresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, continue_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, continue_text_),
  };
  CCommunity_GetGamePersonalDataEntries_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_GetGamePersonalDataEntries_Response_descriptor_,
      CCommunity_GetGamePersonalDataEntries_Response::default_instance_,
      CCommunity_GetGamePersonalDataEntries_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_GetGamePersonalDataEntries_Response));
  CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_ = file->message_type(11);
  static const int CCommunity_TerminateGamePersonalDataEntries_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, steamid_),
  };
  CCommunity_TerminateGamePersonalDataEntries_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_,
      CCommunity_TerminateGamePersonalDataEntries_Request::default_instance_,
      CCommunity_TerminateGamePersonalDataEntries_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_TerminateGamePersonalDataEntries_Request));
  CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_ = file->message_type(12);
  static const int CCommunity_TerminateGamePersonalDataEntries_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Response, gceresult_),
  };
  CCommunity_TerminateGamePersonalDataEntries_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_,
      CCommunity_TerminateGamePersonalDataEntries_Response::default_instance_,
      CCommunity_TerminateGamePersonalDataEntries_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_TerminateGamePersonalDataEntries_Response));
  EGCSystemMsg_descriptor_ = file->enum_type(0);
  ESOMsg_descriptor_ = file->enum_type(1);
  EGCBaseClientMsg_descriptor_ = file->enum_type(2);
  EGCToGCMsg_descriptor_ = file->enum_type(3);
  ECommunityItemClass_descriptor_ = file->enum_type(4);
  ECommunityItemAttribute_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gcsystemmsgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCHVacVerificationChange_descriptor_, &CMsgGCHVacVerificationChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCHAccountPhoneNumberChange_descriptor_, &CMsgGCHAccountPhoneNumberChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCHInviteUserToLobby_descriptor_, &CMsgGCHInviteUserToLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCHRecurringSubscriptionStatusChange_descriptor_, &CMsgGCHRecurringSubscriptionStatusChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CQuest_PublisherAddCommunityItemsToPlayer_Request_descriptor_, &CQuest_PublisherAddCommunityItemsToPlayer_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_descriptor_, &CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CQuest_PublisherAddCommunityItemsToPlayer_Response_descriptor_, &CQuest_PublisherAddCommunityItemsToPlayer_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_GamePersonalDataCategoryInfo_descriptor_, &CCommunity_GamePersonalDataCategoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_GetGamePersonalDataCategories_Request_descriptor_, &CCommunity_GetGamePersonalDataCategories_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_GetGamePersonalDataCategories_Response_descriptor_, &CCommunity_GetGamePersonalDataCategories_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_GetGamePersonalDataEntries_Request_descriptor_, &CCommunity_GetGamePersonalDataEntries_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_GetGamePersonalDataEntries_Response_descriptor_, &CCommunity_GetGamePersonalDataEntries_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_, &CCommunity_TerminateGamePersonalDataEntries_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_, &CCommunity_TerminateGamePersonalDataEntries_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gcsystemmsgs_2eproto() {
  delete CMsgGCHVacVerificationChange::default_instance_;
  delete CMsgGCHVacVerificationChange_reflection_;
  delete CMsgGCHAccountPhoneNumberChange::default_instance_;
  delete CMsgGCHAccountPhoneNumberChange_reflection_;
  delete CMsgGCHInviteUserToLobby::default_instance_;
  delete CMsgGCHInviteUserToLobby_reflection_;
  delete CMsgGCHRecurringSubscriptionStatusChange::default_instance_;
  delete CMsgGCHRecurringSubscriptionStatusChange_reflection_;
  delete CQuest_PublisherAddCommunityItemsToPlayer_Request::default_instance_;
  delete CQuest_PublisherAddCommunityItemsToPlayer_Request_reflection_;
  delete CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::default_instance_;
  delete CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_reflection_;
  delete CQuest_PublisherAddCommunityItemsToPlayer_Response::default_instance_;
  delete CQuest_PublisherAddCommunityItemsToPlayer_Response_reflection_;
  delete CCommunity_GamePersonalDataCategoryInfo::default_instance_;
  delete CCommunity_GamePersonalDataCategoryInfo_reflection_;
  delete CCommunity_GetGamePersonalDataCategories_Request::default_instance_;
  delete CCommunity_GetGamePersonalDataCategories_Request_reflection_;
  delete CCommunity_GetGamePersonalDataCategories_Response::default_instance_;
  delete CCommunity_GetGamePersonalDataCategories_Response_reflection_;
  delete CCommunity_GetGamePersonalDataEntries_Request::default_instance_;
  delete CCommunity_GetGamePersonalDataEntries_Request_reflection_;
  delete CCommunity_GetGamePersonalDataEntries_Response::default_instance_;
  delete CCommunity_GetGamePersonalDataEntries_Response_reflection_;
  delete CCommunity_TerminateGamePersonalDataEntries_Request::default_instance_;
  delete CCommunity_TerminateGamePersonalDataEntries_Request_reflection_;
  delete CCommunity_TerminateGamePersonalDataEntries_Response::default_instance_;
  delete CCommunity_TerminateGamePersonalDataEntries_Response_reflection_;
}

void protobuf_AddDesc_gcsystemmsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022gcsystemmsgs.proto\"S\n\034CMsgGCHVacVerifi"
    "cationChange\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid\030\002"
    " \001(\r\022\023\n\013is_verified\030\003 \001(\010\"\200\001\n\037CMsgGCHAcc"
    "ountPhoneNumberChange\022\017\n\007steamid\030\001 \001(\006\022\r"
    "\n\005appid\030\002 \001(\r\022\020\n\010phone_id\030\003 \001(\004\022\023\n\013is_ve"
    "rified\030\004 \001(\010\022\026\n\016is_identifying\030\005 \001(\010\"j\n\030"
    "CMsgGCHInviteUserToLobby\022\017\n\007steamid\030\001 \001("
    "\006\022\r\n\005appid\030\002 \001(\r\022\027\n\017steamid_invited\030\003 \001("
    "\006\022\025\n\rsteamid_lobby\030\004 \001(\006\"o\n(CMsgGCHRecur"
    "ringSubscriptionStatusChange\022\017\n\007steamid\030"
    "\001 \001(\006\022\r\n\005appid\030\002 \001(\r\022\023\n\013agreementid\030\003 \001("
    "\006\022\016\n\006active\030\004 \001(\010\"\257\002\n1CQuest_PublisherAd"
    "dCommunityItemsToPlayer_Request\022\017\n\007steam"
    "id\030\001 \001(\004\022\r\n\005appid\030\002 \001(\r\022\027\n\017match_item_ty"
    "pe\030\003 \001(\r\022\030\n\020match_item_class\030\004 \001(\r\022\030\n\020pr"
    "efix_item_name\030\005 \001(\t\022P\n\nattributes\030\006 \003(\013"
    "2<.CQuest_PublisherAddCommunityItemsToPl"
    "ayer_Request.Attribute\022\014\n\004note\030\007 \001(\t\032-\n\t"
    "Attribute\022\021\n\tattribute\030\001 \001(\r\022\r\n\005value\030\002 "
    "\001(\004\"b\n2CQuest_PublisherAddCommunityItems"
    "ToPlayer_Response\022\025\n\ritems_matched\030\001 \001(\r"
    "\022\025\n\ritems_granted\030\002 \001(\r\"j\n\'CCommunity_Ga"
    "mePersonalDataCategoryInfo\022\014\n\004type\030\001 \001(\t"
    "\022\032\n\022localization_token\030\002 \001(\t\022\025\n\rtemplate"
    "_file\030\003 \001(\t\"A\n0CCommunity_GetGamePersona"
    "lDataCategories_Request\022\r\n\005appid\030\001 \001(\r\"\216"
    "\001\n1CCommunity_GetGamePersonalDataCategor"
    "ies_Response\022<\n\ncategories\030\001 \003(\0132(.CComm"
    "unity_GamePersonalDataCategoryInfo\022\033\n\023ap"
    "p_assets_basename\030\002 \001(\t\"u\n-CCommunity_Ge"
    "tGamePersonalDataEntries_Request\022\r\n\005appi"
    "d\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\022\014\n\004type\030\003 \001(\t\022\026"
    "\n\016continue_token\030\004 \001(\t\"\203\001\n.CCommunity_Ge"
    "tGamePersonalDataEntries_Response\022\021\n\tgce"
    "result\030\001 \001(\r\022\017\n\007entries\030\002 \003(\t\022\026\n\016continu"
    "e_token\030\003 \001(\t\022\025\n\rcontinue_text\030\004 \001(\t\"U\n3"
    "CCommunity_TerminateGamePersonalDataEntr"
    "ies_Request\022\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 "
    "\001(\004\"I\n4CCommunity_TerminateGamePersonalD"
    "ataEntries_Response\022\021\n\tgceresult\030\001 \001(\r*\302"
    "\030\n\014EGCSystemMsg\022\023\n\017k_EGCMsgInvalid\020\000\022\021\n\r"
    "k_EGCMsgMulti\020\001\022\030\n\024k_EGCMsgGenericReply\020"
    "\n\022\026\n\022k_EGCMsgSystemBase\0202\022\036\n\032k_EGCMsgAch"
    "ievementAwarded\0203\022\026\n\022k_EGCMsgConCommand\020"
    "4\022\030\n\024k_EGCMsgStartPlaying\0205\022\027\n\023k_EGCMsgS"
    "topPlaying\0206\022\033\n\027k_EGCMsgStartGameserver\020"
    "7\022\032\n\026k_EGCMsgStopGameserver\0208\022\025\n\021k_EGCMs"
    "gWGRequest\0209\022\026\n\022k_EGCMsgWGResponse\020:\022\"\n\036"
    "k_EGCMsgGetUserGameStatsSchema\020;\022*\n&k_EG"
    "CMsgGetUserGameStatsSchemaResponse\020<\022\"\n\036"
    "k_EGCMsgGetUserStatsDEPRECATED\020=\022 \n\034k_EG"
    "CMsgGetUserStatsResponse\020>\022\032\n\026k_EGCMsgAp"
    "pInfoUpdated\020\?\022\033\n\027k_EGCMsgValidateSessio"
    "n\020@\022#\n\037k_EGCMsgValidateSessionResponse\020A"
    "\022\"\n\036k_EGCMsgLookupAccountFromInput\020B\022\033\n\027"
    "k_EGCMsgSendHTTPRequest\020C\022#\n\037k_EGCMsgSen"
    "dHTTPRequestResponse\020D\022\030\n\024k_EGCMsgPreTes"
    "tSetup\020E\022\037\n\033k_EGCMsgRecordSupportAction\020"
    "F\022(\n$k_EGCMsgGetAccountDetails_DEPRECATE"
    "D\020G\022\"\n\036k_EGCMsgReceiveInterAppMessage\020I\022"
    "\030\n\024k_EGCMsgFindAccounts\020J\022\025\n\021k_EGCMsgPos"
    "tAlert\020K\022\027\n\023k_EGCMsgGetLicenses\020L\022\030\n\024k_E"
    "GCMsgGetUserStats\020M\022\027\n\023k_EGCMsgGetComman"
    "ds\020N\022\037\n\033k_EGCMsgGetCommandsResponse\020O\022\032\n"
    "\026k_EGCMsgAddFreeLicense\020P\022\"\n\036k_EGCMsgAdd"
    "FreeLicenseResponse\020Q\022\031\n\025k_EGCMsgGetIPLo"
    "cation\020R\022!\n\035k_EGCMsgGetIPLocationRespons"
    "e\020S\022\035\n\031k_EGCMsgSystemStatsSchema\020T\022\032\n\026k_"
    "EGCMsgGetSystemStats\020U\022\"\n\036k_EGCMsgGetSys"
    "temStatsResponse\020V\022\025\n\021k_EGCMsgSendEmail\020"
    "W\022\035\n\031k_EGCMsgSendEmailResponse\020X\022\034\n\030k_EG"
    "CMsgGetEmailTemplate\020Y\022$\n k_EGCMsgGetEma"
    "ilTemplateResponse\020Z\022\032\n\026k_EGCMsgGrantGue"
    "stPass\020[\022\"\n\036k_EGCMsgGrantGuestPassRespon"
    "se\020\\\022\035\n\031k_EGCMsgGetAccountDetails\020]\022%\n!k"
    "_EGCMsgGetAccountDetailsResponse\020^\022\033\n\027k_"
    "EGCMsgGetPersonaNames\020_\022#\n\037k_EGCMsgGetPe"
    "rsonaNamesResponse\020`\022\030\n\024k_EGCMsgMultiple"
    "xMsg\020a\022 \n\034k_EGCMsgMultiplexMsgResponse\020b"
    "\022$\n k_EGCMsgWebAPIRegisterInterfaces\020e\022\034"
    "\n\030k_EGCMsgWebAPIJobRequest\020f\022(\n$k_EGCMsg"
    "WebAPIJobRequestHttpResponse\020h\022+\n\'k_EGCM"
    "sgWebAPIJobRequestForwardResponse\020i\022\031\n\024k"
    "_EGCMsgMemCachedGet\020\310\001\022!\n\034k_EGCMsgMemCac"
    "hedGetResponse\020\311\001\022\031\n\024k_EGCMsgMemCachedSe"
    "t\020\312\001\022\034\n\027k_EGCMsgMemCachedDelete\020\313\001\022\033\n\026k_"
    "EGCMsgMemCachedStats\020\314\001\022#\n\036k_EGCMsgMemCa"
    "chedStatsResponse\020\315\001\022\037\n\032k_EGCMsgMasterSe"
    "tDirectory\020\334\001\022\'\n\"k_EGCMsgMasterSetDirect"
    "oryResponse\020\335\001\022#\n\036k_EGCMsgMasterSetWebAP"
    "IRouting\020\336\001\022+\n&k_EGCMsgMasterSetWebAPIRo"
    "utingResponse\020\337\001\022&\n!k_EGCMsgMasterSetCli"
    "entMsgRouting\020\340\001\022.\n)k_EGCMsgMasterSetCli"
    "entMsgRoutingResponse\020\341\001\022\027\n\022k_EGCMsgSetO"
    "ptions\020\342\001\022\037\n\032k_EGCMsgSetOptionsResponse\020"
    "\343\001\022\030\n\023k_EGCMsgSystemBase2\020\364\003\022#\n\036k_EGCMsg"
    "GetPurchaseTrustStatus\020\365\003\022+\n&k_EGCMsgGet"
    "PurchaseTrustStatusResponse\020\366\003\022\032\n\025k_EGCM"
    "sgUpdateSession\020\367\003\022%\n k_EGCMsgGCAccountV"
    "acStatusChange\020\370\003\022\034\n\027k_EGCMsgCheckFriend"
    "ship\020\371\003\022$\n\037k_EGCMsgCheckFriendshipRespon"
    "se\020\372\003\022\"\n\035k_EGCMsgGetPartnerAccountLink\020\373"
    "\003\022*\n%k_EGCMsgGetPartnerAccountLinkRespon"
    "se\020\374\003\022\037\n\032k_EGCMsgDPPartnerMicroTxns\020\200\004\022\'"
    "\n\"k_EGCMsgDPPartnerMicroTxnsResponse\020\201\004\022"
    "\"\n\035k_EGCMsgVacVerificationChange\020\206\004\022%\n k"
    "_EGCMsgAccountPhoneNumberChange\020\207\004\022\036\n\031k_"
    "EGCMsgInviteUserToLobby\020\213\004\0221\n,k_EGCMsgGe"
    "tGamePersonalDataCategoriesRequest\020\214\004\0222\n"
    "-k_EGCMsgGetGamePersonalDataCategoriesRe"
    "sponse\020\215\004\022.\n)k_EGCMsgGetGamePersonalData"
    "EntriesRequest\020\216\004\022/\n*k_EGCMsgGetGamePers"
    "onalDataEntriesResponse\020\217\004\0224\n/k_EGCMsgTe"
    "rminateGamePersonalDataEntriesRequest\020\220\004"
    "\0225\n0k_EGCMsgTerminateGamePersonalDataEnt"
    "riesResponse\020\221\004\022.\n)k_EGCMsgRecurringSubs"
    "criptionStatusChange\020\222\004\022 \n\033k_EGCMsgDirec"
    "tServiceMethod\020\223\004\022(\n#k_EGCMsgDirectServi"
    "ceMethodResponse\020\224\004*\357\001\n\006ESOMsg\022\023\n\017k_ESOM"
    "sg_Create\020\025\022\023\n\017k_ESOMsg_Update\020\026\022\024\n\020k_ES"
    "OMsg_Destroy\020\027\022\034\n\030k_ESOMsg_CacheSubscrib"
    "ed\020\030\022\036\n\032k_ESOMsg_CacheUnsubscribed\020\031\022\033\n\027"
    "k_ESOMsg_UpdateMultiple\020\032\022#\n\037k_ESOMsg_Ca"
    "cheSubscriptionCheck\020\033\022%\n!k_ESOMsg_Cache"
    "SubscriptionRefresh\020\034*\331\002\n\020EGCBaseClientM"
    "sg\022\032\n\025k_EMsgGCClientWelcome\020\244\037\022\032\n\025k_EMsg"
    "GCServerWelcome\020\245\037\022\030\n\023k_EMsgGCClientHell"
    "o\020\246\037\022\030\n\023k_EMsgGCServerHello\020\247\037\022#\n\036k_EMsg"
    "GCClientConnectionStatus\020\251\037\022#\n\036k_EMsgGCS"
    "erverConnectionStatus\020\252\037\022\037\n\032k_EMsgGCClie"
    "ntHelloPartner\020\253\037\022\032\n\025k_EMsgGCClientHello"
    "PW\020\254\037\022\032\n\025k_EMsgGCClientHelloR2\020\255\037\022\032\n\025k_E"
    "MsgGCClientHelloR3\020\256\037\022\032\n\025k_EMsgGCClientH"
    "elloR4\020\257\037*\211\002\n\nEGCToGCMsg\022\032\n\025k_EGCToGCMsg"
    "MasterAck\020\226\001\022\"\n\035k_EGCToGCMsgMasterAckRes"
    "ponse\020\227\001\022\027\n\022k_EGCToGCMsgRouted\020\230\001\022\034\n\027k_E"
    "GCToGCMsgRoutedReply\020\231\001\022\032\n\025k_EMsgUpdateS"
    "essionIP\020\232\001\022\033\n\026k_EMsgRequestSessionIP\020\233\001"
    "\022#\n\036k_EMsgRequestSessionIPResponse\020\234\001\022&\n"
    "!k_EGCToGCMsgMasterStartupComplete\020\235\001*\260\003"
    "\n\023ECommunityItemClass\022!\n\035k_ECommunityIte"
    "mClass_Invalid\020\000\022\037\n\033k_ECommunityItemClas"
    "s_Badge\020\001\022\"\n\036k_ECommunityItemClass_GameC"
    "ard\020\002\022+\n\'k_ECommunityItemClass_ProfileBa"
    "ckground\020\003\022\"\n\036k_ECommunityItemClass_Emot"
    "icon\020\004\022%\n!k_ECommunityItemClass_BoosterP"
    "ack\020\005\022$\n k_ECommunityItemClass_Consumabl"
    "e\020\006\022!\n\035k_ECommunityItemClass_GameGoo\020\007\022)"
    "\n%k_ECommunityItemClass_ProfileModifier\020"
    "\010\022\037\n\033k_ECommunityItemClass_Scene\020\t\022$\n k_"
    "ECommunityItemClass_SalienItem\020\n*\326\003\n\027ECo"
    "mmunityItemAttribute\022%\n!k_ECommunityItem"
    "Attribute_Invalid\020\000\022(\n$k_ECommunityItemA"
    "ttribute_CardBorder\020\001\022#\n\037k_ECommunityIte"
    "mAttribute_Level\020\002\022)\n%k_ECommunityItemAt"
    "tribute_IssueNumber\020\003\022*\n&k_ECommunityIte"
    "mAttribute_TradableTime\020\004\022,\n(k_ECommunit"
    "yItemAttribute_StorePackageID\020\005\0220\n,k_ECo"
    "mmunityItemAttribute_CommunityItemAppID\020"
    "\006\022/\n+k_ECommunityItemAttribute_Community"
    "ItemType\020\007\0223\n/k_ECommunityItemAttribute_"
    "ProfileModiferEnabled\020\010\022(\n$k_ECommunityI"
    "temAttribute_ExpiryTime\020\tB\005H\001\200\001\000", 6512);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gcsystemmsgs.proto", &protobuf_RegisterTypes);
  CMsgGCHVacVerificationChange::default_instance_ = new CMsgGCHVacVerificationChange();
  CMsgGCHAccountPhoneNumberChange::default_instance_ = new CMsgGCHAccountPhoneNumberChange();
  CMsgGCHInviteUserToLobby::default_instance_ = new CMsgGCHInviteUserToLobby();
  CMsgGCHRecurringSubscriptionStatusChange::default_instance_ = new CMsgGCHRecurringSubscriptionStatusChange();
  CQuest_PublisherAddCommunityItemsToPlayer_Request::default_instance_ = new CQuest_PublisherAddCommunityItemsToPlayer_Request();
  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::default_instance_ = new CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute();
  CQuest_PublisherAddCommunityItemsToPlayer_Response::default_instance_ = new CQuest_PublisherAddCommunityItemsToPlayer_Response();
  CCommunity_GamePersonalDataCategoryInfo::default_instance_ = new CCommunity_GamePersonalDataCategoryInfo();
  CCommunity_GetGamePersonalDataCategories_Request::default_instance_ = new CCommunity_GetGamePersonalDataCategories_Request();
  CCommunity_GetGamePersonalDataCategories_Response::default_instance_ = new CCommunity_GetGamePersonalDataCategories_Response();
  CCommunity_GetGamePersonalDataEntries_Request::default_instance_ = new CCommunity_GetGamePersonalDataEntries_Request();
  CCommunity_GetGamePersonalDataEntries_Response::default_instance_ = new CCommunity_GetGamePersonalDataEntries_Response();
  CCommunity_TerminateGamePersonalDataEntries_Request::default_instance_ = new CCommunity_TerminateGamePersonalDataEntries_Request();
  CCommunity_TerminateGamePersonalDataEntries_Response::default_instance_ = new CCommunity_TerminateGamePersonalDataEntries_Response();
  CMsgGCHVacVerificationChange::default_instance_->InitAsDefaultInstance();
  CMsgGCHAccountPhoneNumberChange::default_instance_->InitAsDefaultInstance();
  CMsgGCHInviteUserToLobby::default_instance_->InitAsDefaultInstance();
  CMsgGCHRecurringSubscriptionStatusChange::default_instance_->InitAsDefaultInstance();
  CQuest_PublisherAddCommunityItemsToPlayer_Request::default_instance_->InitAsDefaultInstance();
  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::default_instance_->InitAsDefaultInstance();
  CQuest_PublisherAddCommunityItemsToPlayer_Response::default_instance_->InitAsDefaultInstance();
  CCommunity_GamePersonalDataCategoryInfo::default_instance_->InitAsDefaultInstance();
  CCommunity_GetGamePersonalDataCategories_Request::default_instance_->InitAsDefaultInstance();
  CCommunity_GetGamePersonalDataCategories_Response::default_instance_->InitAsDefaultInstance();
  CCommunity_GetGamePersonalDataEntries_Request::default_instance_->InitAsDefaultInstance();
  CCommunity_GetGamePersonalDataEntries_Response::default_instance_->InitAsDefaultInstance();
  CCommunity_TerminateGamePersonalDataEntries_Request::default_instance_->InitAsDefaultInstance();
  CCommunity_TerminateGamePersonalDataEntries_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gcsystemmsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gcsystemmsgs_2eproto {
  StaticDescriptorInitializer_gcsystemmsgs_2eproto() {
    protobuf_AddDesc_gcsystemmsgs_2eproto();
  }
} static_descriptor_initializer_gcsystemmsgs_2eproto_;
const ::google::protobuf::EnumDescriptor* EGCSystemMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCSystemMsg_descriptor_;
}
bool EGCSystemMsg_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 10:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 101:
    case 102:
    case 104:
    case 105:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 512:
    case 513:
    case 518:
    case 519:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESOMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESOMsg_descriptor_;
}
bool ESOMsg_IsValid(int value) {
  switch(value) {
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCBaseClientMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCBaseClientMsg_descriptor_;
}
bool EGCBaseClientMsg_IsValid(int value) {
  switch(value) {
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4015:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCToGCMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCToGCMsg_descriptor_;
}
bool EGCToGCMsg_IsValid(int value) {
  switch(value) {
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECommunityItemClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECommunityItemClass_descriptor_;
}
bool ECommunityItemClass_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECommunityItemAttribute_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECommunityItemAttribute_descriptor_;
}
bool ECommunityItemAttribute_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCHVacVerificationChange::kSteamidFieldNumber;
const int CMsgGCHVacVerificationChange::kAppidFieldNumber;
const int CMsgGCHVacVerificationChange::kIsVerifiedFieldNumber;
#endif  // !_MSC_VER

CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCHVacVerificationChange)
}

void CMsgGCHVacVerificationChange::InitAsDefaultInstance() {
}

CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(const CMsgGCHVacVerificationChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCHVacVerificationChange)
}

void CMsgGCHVacVerificationChange::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  is_verified_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCHVacVerificationChange::~CMsgGCHVacVerificationChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHVacVerificationChange)
  SharedDtor();
}

void CMsgGCHVacVerificationChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCHVacVerificationChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHVacVerificationChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCHVacVerificationChange_descriptor_;
}

const CMsgGCHVacVerificationChange& CMsgGCHVacVerificationChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CMsgGCHVacVerificationChange* CMsgGCHVacVerificationChange::default_instance_ = NULL;

CMsgGCHVacVerificationChange* CMsgGCHVacVerificationChange::New() const {
  return new CMsgGCHVacVerificationChange;
}

void CMsgGCHVacVerificationChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCHVacVerificationChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(steamid_, is_verified_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCHVacVerificationChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCHVacVerificationChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (tag == 16) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_verified;
        break;
      }

      // optional bool is_verified = 3;
      case 3: {
        if (tag == 24) {
         parse_is_verified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_verified_)));
          set_has_is_verified();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCHVacVerificationChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCHVacVerificationChange)
  return false;
#undef DO_
}

void CMsgGCHVacVerificationChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCHVacVerificationChange)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional bool is_verified = 3;
  if (has_is_verified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_verified(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCHVacVerificationChange)
}

::google::protobuf::uint8* CMsgGCHVacVerificationChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHVacVerificationChange)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional bool is_verified = 3;
  if (has_is_verified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_verified(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHVacVerificationChange)
  return target;
}

int CMsgGCHVacVerificationChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool is_verified = 3;
    if (has_is_verified()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHVacVerificationChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCHVacVerificationChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCHVacVerificationChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCHVacVerificationChange::MergeFrom(const CMsgGCHVacVerificationChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_is_verified()) {
      set_is_verified(from.is_verified());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCHVacVerificationChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHVacVerificationChange::CopyFrom(const CMsgGCHVacVerificationChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHVacVerificationChange::IsInitialized() const {

  return true;
}

void CMsgGCHVacVerificationChange::Swap(CMsgGCHVacVerificationChange* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(appid_, other->appid_);
    std::swap(is_verified_, other->is_verified_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCHVacVerificationChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCHVacVerificationChange_descriptor_;
  metadata.reflection = CMsgGCHVacVerificationChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCHAccountPhoneNumberChange::kSteamidFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kAppidFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kPhoneIdFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kIsVerifiedFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kIsIdentifyingFieldNumber;
#endif  // !_MSC_VER

CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCHAccountPhoneNumberChange)
}

void CMsgGCHAccountPhoneNumberChange::InitAsDefaultInstance() {
}

CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(const CMsgGCHAccountPhoneNumberChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAccountPhoneNumberChange)
}

void CMsgGCHAccountPhoneNumberChange::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  phone_id_ = GOOGLE_ULONGLONG(0);
  is_verified_ = false;
  is_identifying_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCHAccountPhoneNumberChange::~CMsgGCHAccountPhoneNumberChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHAccountPhoneNumberChange)
  SharedDtor();
}

void CMsgGCHAccountPhoneNumberChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCHAccountPhoneNumberChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHAccountPhoneNumberChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCHAccountPhoneNumberChange_descriptor_;
}

const CMsgGCHAccountPhoneNumberChange& CMsgGCHAccountPhoneNumberChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CMsgGCHAccountPhoneNumberChange* CMsgGCHAccountPhoneNumberChange::default_instance_ = NULL;

CMsgGCHAccountPhoneNumberChange* CMsgGCHAccountPhoneNumberChange::New() const {
  return new CMsgGCHAccountPhoneNumberChange;
}

void CMsgGCHAccountPhoneNumberChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCHAccountPhoneNumberChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(steamid_, is_identifying_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCHAccountPhoneNumberChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCHAccountPhoneNumberChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (tag == 16) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_phone_id;
        break;
      }

      // optional uint64 phone_id = 3;
      case 3: {
        if (tag == 24) {
         parse_phone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_id_)));
          set_has_phone_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_verified;
        break;
      }

      // optional bool is_verified = 4;
      case 4: {
        if (tag == 32) {
         parse_is_verified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_verified_)));
          set_has_is_verified();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_identifying;
        break;
      }

      // optional bool is_identifying = 5;
      case 5: {
        if (tag == 40) {
         parse_is_identifying:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_identifying_)));
          set_has_is_identifying();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCHAccountPhoneNumberChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCHAccountPhoneNumberChange)
  return false;
#undef DO_
}

void CMsgGCHAccountPhoneNumberChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCHAccountPhoneNumberChange)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional uint64 phone_id = 3;
  if (has_phone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->phone_id(), output);
  }

  // optional bool is_verified = 4;
  if (has_is_verified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_verified(), output);
  }

  // optional bool is_identifying = 5;
  if (has_is_identifying()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_identifying(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCHAccountPhoneNumberChange)
}

::google::protobuf::uint8* CMsgGCHAccountPhoneNumberChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAccountPhoneNumberChange)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional uint64 phone_id = 3;
  if (has_phone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->phone_id(), target);
  }

  // optional bool is_verified = 4;
  if (has_is_verified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_verified(), target);
  }

  // optional bool is_identifying = 5;
  if (has_is_identifying()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_identifying(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAccountPhoneNumberChange)
  return target;
}

int CMsgGCHAccountPhoneNumberChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint64 phone_id = 3;
    if (has_phone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_id());
    }

    // optional bool is_verified = 4;
    if (has_is_verified()) {
      total_size += 1 + 1;
    }

    // optional bool is_identifying = 5;
    if (has_is_identifying()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHAccountPhoneNumberChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCHAccountPhoneNumberChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCHAccountPhoneNumberChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCHAccountPhoneNumberChange::MergeFrom(const CMsgGCHAccountPhoneNumberChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_phone_id()) {
      set_phone_id(from.phone_id());
    }
    if (from.has_is_verified()) {
      set_is_verified(from.is_verified());
    }
    if (from.has_is_identifying()) {
      set_is_identifying(from.is_identifying());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCHAccountPhoneNumberChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHAccountPhoneNumberChange::CopyFrom(const CMsgGCHAccountPhoneNumberChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountPhoneNumberChange::IsInitialized() const {

  return true;
}

void CMsgGCHAccountPhoneNumberChange::Swap(CMsgGCHAccountPhoneNumberChange* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(appid_, other->appid_);
    std::swap(phone_id_, other->phone_id_);
    std::swap(is_verified_, other->is_verified_);
    std::swap(is_identifying_, other->is_identifying_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCHAccountPhoneNumberChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCHAccountPhoneNumberChange_descriptor_;
  metadata.reflection = CMsgGCHAccountPhoneNumberChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCHInviteUserToLobby::kSteamidFieldNumber;
const int CMsgGCHInviteUserToLobby::kAppidFieldNumber;
const int CMsgGCHInviteUserToLobby::kSteamidInvitedFieldNumber;
const int CMsgGCHInviteUserToLobby::kSteamidLobbyFieldNumber;
#endif  // !_MSC_VER

CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCHInviteUserToLobby)
}

void CMsgGCHInviteUserToLobby::InitAsDefaultInstance() {
}

CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(const CMsgGCHInviteUserToLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCHInviteUserToLobby)
}

void CMsgGCHInviteUserToLobby::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  steamid_invited_ = GOOGLE_ULONGLONG(0);
  steamid_lobby_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCHInviteUserToLobby::~CMsgGCHInviteUserToLobby() {
  // @@protoc_insertion_point(destructor:CMsgGCHInviteUserToLobby)
  SharedDtor();
}

void CMsgGCHInviteUserToLobby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCHInviteUserToLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHInviteUserToLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCHInviteUserToLobby_descriptor_;
}

const CMsgGCHInviteUserToLobby& CMsgGCHInviteUserToLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CMsgGCHInviteUserToLobby* CMsgGCHInviteUserToLobby::default_instance_ = NULL;

CMsgGCHInviteUserToLobby* CMsgGCHInviteUserToLobby::New() const {
  return new CMsgGCHInviteUserToLobby;
}

void CMsgGCHInviteUserToLobby::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCHInviteUserToLobby*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(steamid_, appid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCHInviteUserToLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCHInviteUserToLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (tag == 16) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_steamid_invited;
        break;
      }

      // optional fixed64 steamid_invited = 3;
      case 3: {
        if (tag == 25) {
         parse_steamid_invited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_invited_)));
          set_has_steamid_invited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_steamid_lobby;
        break;
      }

      // optional fixed64 steamid_lobby = 4;
      case 4: {
        if (tag == 33) {
         parse_steamid_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_lobby_)));
          set_has_steamid_lobby();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCHInviteUserToLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCHInviteUserToLobby)
  return false;
#undef DO_
}

void CMsgGCHInviteUserToLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCHInviteUserToLobby)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional fixed64 steamid_invited = 3;
  if (has_steamid_invited()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid_invited(), output);
  }

  // optional fixed64 steamid_lobby = 4;
  if (has_steamid_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steamid_lobby(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCHInviteUserToLobby)
}

::google::protobuf::uint8* CMsgGCHInviteUserToLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHInviteUserToLobby)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional fixed64 steamid_invited = 3;
  if (has_steamid_invited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid_invited(), target);
  }

  // optional fixed64 steamid_lobby = 4;
  if (has_steamid_lobby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steamid_lobby(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHInviteUserToLobby)
  return target;
}

int CMsgGCHInviteUserToLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional fixed64 steamid_invited = 3;
    if (has_steamid_invited()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_lobby = 4;
    if (has_steamid_lobby()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHInviteUserToLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCHInviteUserToLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCHInviteUserToLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCHInviteUserToLobby::MergeFrom(const CMsgGCHInviteUserToLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_steamid_invited()) {
      set_steamid_invited(from.steamid_invited());
    }
    if (from.has_steamid_lobby()) {
      set_steamid_lobby(from.steamid_lobby());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCHInviteUserToLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHInviteUserToLobby::CopyFrom(const CMsgGCHInviteUserToLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHInviteUserToLobby::IsInitialized() const {

  return true;
}

void CMsgGCHInviteUserToLobby::Swap(CMsgGCHInviteUserToLobby* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(appid_, other->appid_);
    std::swap(steamid_invited_, other->steamid_invited_);
    std::swap(steamid_lobby_, other->steamid_lobby_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCHInviteUserToLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCHInviteUserToLobby_descriptor_;
  metadata.reflection = CMsgGCHInviteUserToLobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCHRecurringSubscriptionStatusChange::kSteamidFieldNumber;
const int CMsgGCHRecurringSubscriptionStatusChange::kAppidFieldNumber;
const int CMsgGCHRecurringSubscriptionStatusChange::kAgreementidFieldNumber;
const int CMsgGCHRecurringSubscriptionStatusChange::kActiveFieldNumber;
#endif  // !_MSC_VER

CMsgGCHRecurringSubscriptionStatusChange::CMsgGCHRecurringSubscriptionStatusChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCHRecurringSubscriptionStatusChange)
}

void CMsgGCHRecurringSubscriptionStatusChange::InitAsDefaultInstance() {
}

CMsgGCHRecurringSubscriptionStatusChange::CMsgGCHRecurringSubscriptionStatusChange(const CMsgGCHRecurringSubscriptionStatusChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCHRecurringSubscriptionStatusChange)
}

void CMsgGCHRecurringSubscriptionStatusChange::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  agreementid_ = GOOGLE_ULONGLONG(0);
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCHRecurringSubscriptionStatusChange::~CMsgGCHRecurringSubscriptionStatusChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHRecurringSubscriptionStatusChange)
  SharedDtor();
}

void CMsgGCHRecurringSubscriptionStatusChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCHRecurringSubscriptionStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHRecurringSubscriptionStatusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCHRecurringSubscriptionStatusChange_descriptor_;
}

const CMsgGCHRecurringSubscriptionStatusChange& CMsgGCHRecurringSubscriptionStatusChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CMsgGCHRecurringSubscriptionStatusChange* CMsgGCHRecurringSubscriptionStatusChange::default_instance_ = NULL;

CMsgGCHRecurringSubscriptionStatusChange* CMsgGCHRecurringSubscriptionStatusChange::New() const {
  return new CMsgGCHRecurringSubscriptionStatusChange;
}

void CMsgGCHRecurringSubscriptionStatusChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCHRecurringSubscriptionStatusChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(steamid_, active_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCHRecurringSubscriptionStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCHRecurringSubscriptionStatusChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (tag == 16) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_agreementid;
        break;
      }

      // optional fixed64 agreementid = 3;
      case 3: {
        if (tag == 25) {
         parse_agreementid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &agreementid_)));
          set_has_agreementid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_active;
        break;
      }

      // optional bool active = 4;
      case 4: {
        if (tag == 32) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCHRecurringSubscriptionStatusChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCHRecurringSubscriptionStatusChange)
  return false;
#undef DO_
}

void CMsgGCHRecurringSubscriptionStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCHRecurringSubscriptionStatusChange)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional fixed64 agreementid = 3;
  if (has_agreementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->agreementid(), output);
  }

  // optional bool active = 4;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCHRecurringSubscriptionStatusChange)
}

::google::protobuf::uint8* CMsgGCHRecurringSubscriptionStatusChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHRecurringSubscriptionStatusChange)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional fixed64 agreementid = 3;
  if (has_agreementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->agreementid(), target);
  }

  // optional bool active = 4;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHRecurringSubscriptionStatusChange)
  return target;
}

int CMsgGCHRecurringSubscriptionStatusChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional fixed64 agreementid = 3;
    if (has_agreementid()) {
      total_size += 1 + 8;
    }

    // optional bool active = 4;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHRecurringSubscriptionStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCHRecurringSubscriptionStatusChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCHRecurringSubscriptionStatusChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCHRecurringSubscriptionStatusChange::MergeFrom(const CMsgGCHRecurringSubscriptionStatusChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_agreementid()) {
      set_agreementid(from.agreementid());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCHRecurringSubscriptionStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHRecurringSubscriptionStatusChange::CopyFrom(const CMsgGCHRecurringSubscriptionStatusChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHRecurringSubscriptionStatusChange::IsInitialized() const {

  return true;
}

void CMsgGCHRecurringSubscriptionStatusChange::Swap(CMsgGCHRecurringSubscriptionStatusChange* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(appid_, other->appid_);
    std::swap(agreementid_, other->agreementid_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCHRecurringSubscriptionStatusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCHRecurringSubscriptionStatusChange_descriptor_;
  metadata.reflection = CMsgGCHRecurringSubscriptionStatusChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::kAttributeFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::kValueFieldNumber;
#endif  // !_MSC_VER

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::InitAsDefaultInstance() {
}

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SharedCtor() {
  _cached_size_ = 0;
  attribute_ = 0u;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::~CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  SharedDtor();
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_descriptor_;
}

const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::default_instance_ = NULL;

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::New() const {
  return new CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(value_, attribute_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attribute = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_)));
          set_has_attribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  return false;
#undef DO_
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  // optional uint32 attribute = 1;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attribute(), output);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}

::google::protobuf::uint8* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  // optional uint32 attribute = 1;
  if (has_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attribute(), target);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  return target;
}

int CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attribute = 1;
    if (has_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute());
    }

    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute()) {
      set_attribute(from.attribute());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::IsInitialized() const {

  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::Swap(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* other) {
  if (other != this) {
    std::swap(attribute_, other->attribute_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_descriptor_;
  metadata.reflection = CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kSteamidFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kAppidFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kMatchItemTypeFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kMatchItemClassFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kPrefixItemNameFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kAttributesFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kNoteFieldNumber;
#endif  // !_MSC_VER

CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::InitAsDefaultInstance() {
}

CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  match_item_type_ = 0u;
  match_item_class_ = 0u;
  prefix_item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CQuest_PublisherAddCommunityItemsToPlayer_Request::~CQuest_PublisherAddCommunityItemsToPlayer_Request() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  SharedDtor();
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::SharedDtor() {
  if (prefix_item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prefix_item_name_;
  }
  if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete note_;
  }
  if (this != default_instance_) {
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CQuest_PublisherAddCommunityItemsToPlayer_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CQuest_PublisherAddCommunityItemsToPlayer_Request_descriptor_;
}

const CQuest_PublisherAddCommunityItemsToPlayer_Request& CQuest_PublisherAddCommunityItemsToPlayer_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CQuest_PublisherAddCommunityItemsToPlayer_Request* CQuest_PublisherAddCommunityItemsToPlayer_Request::default_instance_ = NULL;

CQuest_PublisherAddCommunityItemsToPlayer_Request* CQuest_PublisherAddCommunityItemsToPlayer_Request::New() const {
  return new CQuest_PublisherAddCommunityItemsToPlayer_Request;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CQuest_PublisherAddCommunityItemsToPlayer_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(steamid_, match_item_type_);
    match_item_class_ = 0u;
    if (has_prefix_item_name()) {
      if (prefix_item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        prefix_item_name_->clear();
      }
    }
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        note_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steamid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (tag == 16) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_match_item_type;
        break;
      }

      // optional uint32 match_item_type = 3;
      case 3: {
        if (tag == 24) {
         parse_match_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_item_type_)));
          set_has_match_item_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_match_item_class;
        break;
      }

      // optional uint32 match_item_class = 4;
      case 4: {
        if (tag == 32) {
         parse_match_item_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_item_class_)));
          set_has_match_item_class();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_prefix_item_name;
        break;
      }

      // optional string prefix_item_name = 5;
      case 5: {
        if (tag == 42) {
         parse_prefix_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix_item_name().data(), this->prefix_item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "prefix_item_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attributes;
        break;
      }

      // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
      case 6: {
        if (tag == 50) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attributes;
        if (input->ExpectTag(58)) goto parse_note;
        break;
      }

      // optional string note = 7;
      case 7: {
        if (tag == 58) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "note");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  return false;
#undef DO_
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  // optional uint64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional uint32 match_item_type = 3;
  if (has_match_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->match_item_type(), output);
  }

  // optional uint32 match_item_class = 4;
  if (has_match_item_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->match_item_class(), output);
  }

  // optional string prefix_item_name = 5;
  if (has_prefix_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix_item_name().data(), this->prefix_item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefix_item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->prefix_item_name(), output);
  }

  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attributes(i), output);
  }

  // optional string note = 7;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->note(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}

::google::protobuf::uint8* CQuest_PublisherAddCommunityItemsToPlayer_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  // optional uint64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional uint32 match_item_type = 3;
  if (has_match_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->match_item_type(), target);
  }

  // optional uint32 match_item_class = 4;
  if (has_match_item_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->match_item_class(), target);
  }

  // optional string prefix_item_name = 5;
  if (has_prefix_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix_item_name().data(), this->prefix_item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefix_item_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->prefix_item_name(), target);
  }

  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attributes(i), target);
  }

  // optional string note = 7;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->note(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  return target;
}

int CQuest_PublisherAddCommunityItemsToPlayer_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 match_item_type = 3;
    if (has_match_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_item_type());
    }

    // optional uint32 match_item_class = 4;
    if (has_match_item_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_item_class());
    }

    // optional string prefix_item_name = 5;
    if (has_prefix_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix_item_name());
    }

    // optional string note = 7;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

  }
  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CQuest_PublisherAddCommunityItemsToPlayer_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CQuest_PublisherAddCommunityItemsToPlayer_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_match_item_type()) {
      set_match_item_type(from.match_item_type());
    }
    if (from.has_match_item_class()) {
      set_match_item_class(from.match_item_class());
    }
    if (from.has_prefix_item_name()) {
      set_prefix_item_name(from.prefix_item_name());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request::IsInitialized() const {

  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::Swap(CQuest_PublisherAddCommunityItemsToPlayer_Request* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(appid_, other->appid_);
    std::swap(match_item_type_, other->match_item_type_);
    std::swap(match_item_class_, other->match_item_class_);
    std::swap(prefix_item_name_, other->prefix_item_name_);
    attributes_.Swap(&other->attributes_);
    std::swap(note_, other->note_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CQuest_PublisherAddCommunityItemsToPlayer_Request_descriptor_;
  metadata.reflection = CQuest_PublisherAddCommunityItemsToPlayer_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CQuest_PublisherAddCommunityItemsToPlayer_Response::kItemsMatchedFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Response::kItemsGrantedFieldNumber;
#endif  // !_MSC_VER

CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::InitAsDefaultInstance() {
}

CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::SharedCtor() {
  _cached_size_ = 0;
  items_matched_ = 0u;
  items_granted_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CQuest_PublisherAddCommunityItemsToPlayer_Response::~CQuest_PublisherAddCommunityItemsToPlayer_Response() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  SharedDtor();
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CQuest_PublisherAddCommunityItemsToPlayer_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CQuest_PublisherAddCommunityItemsToPlayer_Response_descriptor_;
}

const CQuest_PublisherAddCommunityItemsToPlayer_Response& CQuest_PublisherAddCommunityItemsToPlayer_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CQuest_PublisherAddCommunityItemsToPlayer_Response* CQuest_PublisherAddCommunityItemsToPlayer_Response::default_instance_ = NULL;

CQuest_PublisherAddCommunityItemsToPlayer_Response* CQuest_PublisherAddCommunityItemsToPlayer_Response::New() const {
  return new CQuest_PublisherAddCommunityItemsToPlayer_Response;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CQuest_PublisherAddCommunityItemsToPlayer_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(items_matched_, items_granted_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 items_matched = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &items_matched_)));
          set_has_items_matched();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_items_granted;
        break;
      }

      // optional uint32 items_granted = 2;
      case 2: {
        if (tag == 16) {
         parse_items_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &items_granted_)));
          set_has_items_granted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  return false;
#undef DO_
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  // optional uint32 items_matched = 1;
  if (has_items_matched()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->items_matched(), output);
  }

  // optional uint32 items_granted = 2;
  if (has_items_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->items_granted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}

::google::protobuf::uint8* CQuest_PublisherAddCommunityItemsToPlayer_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  // optional uint32 items_matched = 1;
  if (has_items_matched()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->items_matched(), target);
  }

  // optional uint32 items_granted = 2;
  if (has_items_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->items_granted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  return target;
}

int CQuest_PublisherAddCommunityItemsToPlayer_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 items_matched = 1;
    if (has_items_matched()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->items_matched());
    }

    // optional uint32 items_granted = 2;
    if (has_items_granted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->items_granted());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CQuest_PublisherAddCommunityItemsToPlayer_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CQuest_PublisherAddCommunityItemsToPlayer_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_items_matched()) {
      set_items_matched(from.items_matched());
    }
    if (from.has_items_granted()) {
      set_items_granted(from.items_granted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Response::IsInitialized() const {

  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::Swap(CQuest_PublisherAddCommunityItemsToPlayer_Response* other) {
  if (other != this) {
    std::swap(items_matched_, other->items_matched_);
    std::swap(items_granted_, other->items_granted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CQuest_PublisherAddCommunityItemsToPlayer_Response_descriptor_;
  metadata.reflection = CQuest_PublisherAddCommunityItemsToPlayer_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCommunity_GamePersonalDataCategoryInfo::kTypeFieldNumber;
const int CCommunity_GamePersonalDataCategoryInfo::kLocalizationTokenFieldNumber;
const int CCommunity_GamePersonalDataCategoryInfo::kTemplateFileFieldNumber;
#endif  // !_MSC_VER

CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GamePersonalDataCategoryInfo)
}

void CCommunity_GamePersonalDataCategoryInfo::InitAsDefaultInstance() {
}

CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(const CCommunity_GamePersonalDataCategoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GamePersonalDataCategoryInfo)
}

void CCommunity_GamePersonalDataCategoryInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localization_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_GamePersonalDataCategoryInfo::~CCommunity_GamePersonalDataCategoryInfo() {
  // @@protoc_insertion_point(destructor:CCommunity_GamePersonalDataCategoryInfo)
  SharedDtor();
}

void CCommunity_GamePersonalDataCategoryInfo::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (localization_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localization_token_;
  }
  if (template_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete template_file_;
  }
  if (this != default_instance_) {
  }
}

void CCommunity_GamePersonalDataCategoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GamePersonalDataCategoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_GamePersonalDataCategoryInfo_descriptor_;
}

const CCommunity_GamePersonalDataCategoryInfo& CCommunity_GamePersonalDataCategoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CCommunity_GamePersonalDataCategoryInfo* CCommunity_GamePersonalDataCategoryInfo::default_instance_ = NULL;

CCommunity_GamePersonalDataCategoryInfo* CCommunity_GamePersonalDataCategoryInfo::New() const {
  return new CCommunity_GamePersonalDataCategoryInfo;
}

void CCommunity_GamePersonalDataCategoryInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_localization_token()) {
      if (localization_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        localization_token_->clear();
      }
    }
    if (has_template_file()) {
      if (template_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        template_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_GamePersonalDataCategoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GamePersonalDataCategoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_localization_token;
        break;
      }

      // optional string localization_token = 2;
      case 2: {
        if (tag == 18) {
         parse_localization_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localization_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localization_token().data(), this->localization_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "localization_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_template_file;
        break;
      }

      // optional string template_file = 3;
      case 3: {
        if (tag == 26) {
         parse_template_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->template_file().data(), this->template_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "template_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GamePersonalDataCategoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GamePersonalDataCategoryInfo)
  return false;
#undef DO_
}

void CCommunity_GamePersonalDataCategoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GamePersonalDataCategoryInfo)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string localization_token = 2;
  if (has_localization_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_token().data(), this->localization_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "localization_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->localization_token(), output);
  }

  // optional string template_file = 3;
  if (has_template_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_file().data(), this->template_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->template_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GamePersonalDataCategoryInfo)
}

::google::protobuf::uint8* CCommunity_GamePersonalDataCategoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GamePersonalDataCategoryInfo)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string localization_token = 2;
  if (has_localization_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_token().data(), this->localization_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "localization_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->localization_token(), target);
  }

  // optional string template_file = 3;
  if (has_template_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_file().data(), this->template_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->template_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GamePersonalDataCategoryInfo)
  return target;
}

int CCommunity_GamePersonalDataCategoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string localization_token = 2;
    if (has_localization_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localization_token());
    }

    // optional string template_file = 3;
    if (has_template_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GamePersonalDataCategoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_GamePersonalDataCategoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_GamePersonalDataCategoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_GamePersonalDataCategoryInfo::MergeFrom(const CCommunity_GamePersonalDataCategoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_localization_token()) {
      set_localization_token(from.localization_token());
    }
    if (from.has_template_file()) {
      set_template_file(from.template_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_GamePersonalDataCategoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GamePersonalDataCategoryInfo::CopyFrom(const CCommunity_GamePersonalDataCategoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GamePersonalDataCategoryInfo::IsInitialized() const {

  return true;
}

void CCommunity_GamePersonalDataCategoryInfo::Swap(CCommunity_GamePersonalDataCategoryInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(localization_token_, other->localization_token_);
    std::swap(template_file_, other->template_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_GamePersonalDataCategoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_GamePersonalDataCategoryInfo_descriptor_;
  metadata.reflection = CCommunity_GamePersonalDataCategoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCommunity_GetGamePersonalDataCategories_Request::kAppidFieldNumber;
#endif  // !_MSC_VER

CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetGamePersonalDataCategories_Request)
}

void CCommunity_GetGamePersonalDataCategories_Request::InitAsDefaultInstance() {
}

CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(const CCommunity_GetGamePersonalDataCategories_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataCategories_Request)
}

void CCommunity_GetGamePersonalDataCategories_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_GetGamePersonalDataCategories_Request::~CCommunity_GetGamePersonalDataCategories_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataCategories_Request)
  SharedDtor();
}

void CCommunity_GetGamePersonalDataCategories_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCommunity_GetGamePersonalDataCategories_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataCategories_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_GetGamePersonalDataCategories_Request_descriptor_;
}

const CCommunity_GetGamePersonalDataCategories_Request& CCommunity_GetGamePersonalDataCategories_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CCommunity_GetGamePersonalDataCategories_Request* CCommunity_GetGamePersonalDataCategories_Request::default_instance_ = NULL;

CCommunity_GetGamePersonalDataCategories_Request* CCommunity_GetGamePersonalDataCategories_Request::New() const {
  return new CCommunity_GetGamePersonalDataCategories_Request;
}

void CCommunity_GetGamePersonalDataCategories_Request::Clear() {
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_GetGamePersonalDataCategories_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetGamePersonalDataCategories_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetGamePersonalDataCategories_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetGamePersonalDataCategories_Request)
  return false;
#undef DO_
}

void CCommunity_GetGamePersonalDataCategories_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetGamePersonalDataCategories_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetGamePersonalDataCategories_Request)
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataCategories_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataCategories_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataCategories_Request)
  return target;
}

int CCommunity_GetGamePersonalDataCategories_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataCategories_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataCategories_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_GetGamePersonalDataCategories_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataCategories_Request::MergeFrom(const CCommunity_GetGamePersonalDataCategories_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_GetGamePersonalDataCategories_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataCategories_Request::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Request::IsInitialized() const {

  return true;
}

void CCommunity_GetGamePersonalDataCategories_Request::Swap(CCommunity_GetGamePersonalDataCategories_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataCategories_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_GetGamePersonalDataCategories_Request_descriptor_;
  metadata.reflection = CCommunity_GetGamePersonalDataCategories_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCommunity_GetGamePersonalDataCategories_Response::kCategoriesFieldNumber;
const int CCommunity_GetGamePersonalDataCategories_Response::kAppAssetsBasenameFieldNumber;
#endif  // !_MSC_VER

CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetGamePersonalDataCategories_Response)
}

void CCommunity_GetGamePersonalDataCategories_Response::InitAsDefaultInstance() {
}

CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(const CCommunity_GetGamePersonalDataCategories_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataCategories_Response)
}

void CCommunity_GetGamePersonalDataCategories_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_assets_basename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_GetGamePersonalDataCategories_Response::~CCommunity_GetGamePersonalDataCategories_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataCategories_Response)
  SharedDtor();
}

void CCommunity_GetGamePersonalDataCategories_Response::SharedDtor() {
  if (app_assets_basename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_assets_basename_;
  }
  if (this != default_instance_) {
  }
}

void CCommunity_GetGamePersonalDataCategories_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataCategories_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_GetGamePersonalDataCategories_Response_descriptor_;
}

const CCommunity_GetGamePersonalDataCategories_Response& CCommunity_GetGamePersonalDataCategories_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CCommunity_GetGamePersonalDataCategories_Response* CCommunity_GetGamePersonalDataCategories_Response::default_instance_ = NULL;

CCommunity_GetGamePersonalDataCategories_Response* CCommunity_GetGamePersonalDataCategories_Response::New() const {
  return new CCommunity_GetGamePersonalDataCategories_Response;
}

void CCommunity_GetGamePersonalDataCategories_Response::Clear() {
  if (has_app_assets_basename()) {
    if (app_assets_basename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      app_assets_basename_->clear();
    }
  }
  categories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_GetGamePersonalDataCategories_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetGamePersonalDataCategories_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
      case 1: {
        if (tag == 10) {
         parse_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_categories;
        if (input->ExpectTag(18)) goto parse_app_assets_basename;
        break;
      }

      // optional string app_assets_basename = 2;
      case 2: {
        if (tag == 18) {
         parse_app_assets_basename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_assets_basename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_assets_basename().data(), this->app_assets_basename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_assets_basename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetGamePersonalDataCategories_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetGamePersonalDataCategories_Response)
  return false;
#undef DO_
}

void CCommunity_GetGamePersonalDataCategories_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetGamePersonalDataCategories_Response)
  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->categories(i), output);
  }

  // optional string app_assets_basename = 2;
  if (has_app_assets_basename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_assets_basename().data(), this->app_assets_basename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_assets_basename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_assets_basename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetGamePersonalDataCategories_Response)
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataCategories_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataCategories_Response)
  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  for (int i = 0; i < this->categories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->categories(i), target);
  }

  // optional string app_assets_basename = 2;
  if (has_app_assets_basename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_assets_basename().data(), this->app_assets_basename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_assets_basename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_assets_basename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataCategories_Response)
  return target;
}

int CCommunity_GetGamePersonalDataCategories_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string app_assets_basename = 2;
    if (has_app_assets_basename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_assets_basename());
    }

  }
  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  total_size += 1 * this->categories_size();
  for (int i = 0; i < this->categories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->categories(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataCategories_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataCategories_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_GetGamePersonalDataCategories_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataCategories_Response::MergeFrom(const CCommunity_GetGamePersonalDataCategories_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  categories_.MergeFrom(from.categories_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_app_assets_basename()) {
      set_app_assets_basename(from.app_assets_basename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_GetGamePersonalDataCategories_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataCategories_Response::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Response::IsInitialized() const {

  return true;
}

void CCommunity_GetGamePersonalDataCategories_Response::Swap(CCommunity_GetGamePersonalDataCategories_Response* other) {
  if (other != this) {
    categories_.Swap(&other->categories_);
    std::swap(app_assets_basename_, other->app_assets_basename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataCategories_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_GetGamePersonalDataCategories_Response_descriptor_;
  metadata.reflection = CCommunity_GetGamePersonalDataCategories_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCommunity_GetGamePersonalDataEntries_Request::kAppidFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Request::kSteamidFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Request::kTypeFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Request::kContinueTokenFieldNumber;
#endif  // !_MSC_VER

CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetGamePersonalDataEntries_Request)
}

void CCommunity_GetGamePersonalDataEntries_Request::InitAsDefaultInstance() {
}

CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(const CCommunity_GetGamePersonalDataEntries_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataEntries_Request)
}

void CCommunity_GetGamePersonalDataEntries_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = 0u;
  steamid_ = GOOGLE_ULONGLONG(0);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  continue_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_GetGamePersonalDataEntries_Request::~CCommunity_GetGamePersonalDataEntries_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataEntries_Request)
  SharedDtor();
}

void CCommunity_GetGamePersonalDataEntries_Request::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (continue_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continue_token_;
  }
  if (this != default_instance_) {
  }
}

void CCommunity_GetGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataEntries_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_GetGamePersonalDataEntries_Request_descriptor_;
}

const CCommunity_GetGamePersonalDataEntries_Request& CCommunity_GetGamePersonalDataEntries_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CCommunity_GetGamePersonalDataEntries_Request* CCommunity_GetGamePersonalDataEntries_Request::default_instance_ = NULL;

CCommunity_GetGamePersonalDataEntries_Request* CCommunity_GetGamePersonalDataEntries_Request::New() const {
  return new CCommunity_GetGamePersonalDataEntries_Request;
}

void CCommunity_GetGamePersonalDataEntries_Request::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    appid_ = 0u;
    steamid_ = GOOGLE_ULONGLONG(0);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_continue_token()) {
      if (continue_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continue_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_GetGamePersonalDataEntries_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetGamePersonalDataEntries_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_steamid;
        break;
      }

      // optional uint64 steamid = 2;
      case 2: {
        if (tag == 16) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_continue_token;
        break;
      }

      // optional string continue_token = 4;
      case 4: {
        if (tag == 34) {
         parse_continue_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continue_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->continue_token().data(), this->continue_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "continue_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetGamePersonalDataEntries_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetGamePersonalDataEntries_Request)
  return false;
#undef DO_
}

void CCommunity_GetGamePersonalDataEntries_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetGamePersonalDataEntries_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 steamid = 2;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional string continue_token = 4;
  if (has_continue_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "continue_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->continue_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetGamePersonalDataEntries_Request)
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataEntries_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataEntries_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 steamid = 2;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional string continue_token = 4;
  if (has_continue_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "continue_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->continue_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataEntries_Request)
  return target;
}

int CCommunity_GetGamePersonalDataEntries_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string continue_token = 4;
    if (has_continue_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continue_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataEntries_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataEntries_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_GetGamePersonalDataEntries_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataEntries_Request::MergeFrom(const CCommunity_GetGamePersonalDataEntries_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_continue_token()) {
      set_continue_token(from.continue_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_GetGamePersonalDataEntries_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataEntries_Request::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Request::IsInitialized() const {

  return true;
}

void CCommunity_GetGamePersonalDataEntries_Request::Swap(CCommunity_GetGamePersonalDataEntries_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(steamid_, other->steamid_);
    std::swap(type_, other->type_);
    std::swap(continue_token_, other->continue_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataEntries_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_GetGamePersonalDataEntries_Request_descriptor_;
  metadata.reflection = CCommunity_GetGamePersonalDataEntries_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCommunity_GetGamePersonalDataEntries_Response::kGceresultFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Response::kEntriesFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Response::kContinueTokenFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Response::kContinueTextFieldNumber;
#endif  // !_MSC_VER

CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetGamePersonalDataEntries_Response)
}

void CCommunity_GetGamePersonalDataEntries_Response::InitAsDefaultInstance() {
}

CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(const CCommunity_GetGamePersonalDataEntries_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataEntries_Response)
}

void CCommunity_GetGamePersonalDataEntries_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gceresult_ = 0u;
  continue_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  continue_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_GetGamePersonalDataEntries_Response::~CCommunity_GetGamePersonalDataEntries_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataEntries_Response)
  SharedDtor();
}

void CCommunity_GetGamePersonalDataEntries_Response::SharedDtor() {
  if (continue_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continue_token_;
  }
  if (continue_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continue_text_;
  }
  if (this != default_instance_) {
  }
}

void CCommunity_GetGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataEntries_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_GetGamePersonalDataEntries_Response_descriptor_;
}

const CCommunity_GetGamePersonalDataEntries_Response& CCommunity_GetGamePersonalDataEntries_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CCommunity_GetGamePersonalDataEntries_Response* CCommunity_GetGamePersonalDataEntries_Response::default_instance_ = NULL;

CCommunity_GetGamePersonalDataEntries_Response* CCommunity_GetGamePersonalDataEntries_Response::New() const {
  return new CCommunity_GetGamePersonalDataEntries_Response;
}

void CCommunity_GetGamePersonalDataEntries_Response::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    gceresult_ = 0u;
    if (has_continue_token()) {
      if (continue_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continue_token_->clear();
      }
    }
    if (has_continue_text()) {
      if (continue_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continue_text_->clear();
      }
    }
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_GetGamePersonalDataEntries_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetGamePersonalDataEntries_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gceresult = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gceresult_)));
          set_has_gceresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated string entries = 2;
      case 2: {
        if (tag == 18) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_entries()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entries(this->entries_size() - 1).data(),
            this->entries(this->entries_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "entries");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectTag(26)) goto parse_continue_token;
        break;
      }

      // optional string continue_token = 3;
      case 3: {
        if (tag == 26) {
         parse_continue_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continue_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->continue_token().data(), this->continue_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "continue_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_continue_text;
        break;
      }

      // optional string continue_text = 4;
      case 4: {
        if (tag == 34) {
         parse_continue_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continue_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->continue_text().data(), this->continue_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "continue_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetGamePersonalDataEntries_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetGamePersonalDataEntries_Response)
  return false;
#undef DO_
}

void CCommunity_GetGamePersonalDataEntries_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetGamePersonalDataEntries_Response)
  // optional uint32 gceresult = 1;
  if (has_gceresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gceresult(), output);
  }

  // repeated string entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->entries(i).data(), this->entries(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "entries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->entries(i), output);
  }

  // optional string continue_token = 3;
  if (has_continue_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "continue_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->continue_token(), output);
  }

  // optional string continue_text = 4;
  if (has_continue_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continue_text().data(), this->continue_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "continue_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->continue_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetGamePersonalDataEntries_Response)
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataEntries_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataEntries_Response)
  // optional uint32 gceresult = 1;
  if (has_gceresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gceresult(), target);
  }

  // repeated string entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entries(i).data(), this->entries(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->entries(i), target);
  }

  // optional string continue_token = 3;
  if (has_continue_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "continue_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->continue_token(), target);
  }

  // optional string continue_text = 4;
  if (has_continue_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continue_text().data(), this->continue_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "continue_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->continue_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataEntries_Response)
  return target;
}

int CCommunity_GetGamePersonalDataEntries_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gceresult = 1;
    if (has_gceresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gceresult());
    }

    // optional string continue_token = 3;
    if (has_continue_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continue_token());
    }

    // optional string continue_text = 4;
    if (has_continue_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continue_text());
    }

  }
  // repeated string entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataEntries_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataEntries_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_GetGamePersonalDataEntries_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataEntries_Response::MergeFrom(const CCommunity_GetGamePersonalDataEntries_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gceresult()) {
      set_gceresult(from.gceresult());
    }
    if (from.has_continue_token()) {
      set_continue_token(from.continue_token());
    }
    if (from.has_continue_text()) {
      set_continue_text(from.continue_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_GetGamePersonalDataEntries_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataEntries_Response::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Response::IsInitialized() const {

  return true;
}

void CCommunity_GetGamePersonalDataEntries_Response::Swap(CCommunity_GetGamePersonalDataEntries_Response* other) {
  if (other != this) {
    std::swap(gceresult_, other->gceresult_);
    entries_.Swap(&other->entries_);
    std::swap(continue_token_, other->continue_token_);
    std::swap(continue_text_, other->continue_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataEntries_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_GetGamePersonalDataEntries_Response_descriptor_;
  metadata.reflection = CCommunity_GetGamePersonalDataEntries_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCommunity_TerminateGamePersonalDataEntries_Request::kAppidFieldNumber;
const int CCommunity_TerminateGamePersonalDataEntries_Request::kSteamidFieldNumber;
#endif  // !_MSC_VER

CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_TerminateGamePersonalDataEntries_Request)
}

void CCommunity_TerminateGamePersonalDataEntries_Request::InitAsDefaultInstance() {
}

CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(const CCommunity_TerminateGamePersonalDataEntries_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCommunity_TerminateGamePersonalDataEntries_Request)
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_TerminateGamePersonalDataEntries_Request::~CCommunity_TerminateGamePersonalDataEntries_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_TerminateGamePersonalDataEntries_Request)
  SharedDtor();
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_TerminateGamePersonalDataEntries_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_;
}

const CCommunity_TerminateGamePersonalDataEntries_Request& CCommunity_TerminateGamePersonalDataEntries_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CCommunity_TerminateGamePersonalDataEntries_Request* CCommunity_TerminateGamePersonalDataEntries_Request::default_instance_ = NULL;

CCommunity_TerminateGamePersonalDataEntries_Request* CCommunity_TerminateGamePersonalDataEntries_Request::New() const {
  return new CCommunity_TerminateGamePersonalDataEntries_Request;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CCommunity_TerminateGamePersonalDataEntries_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(steamid_, appid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_TerminateGamePersonalDataEntries_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_steamid;
        break;
      }

      // optional uint64 steamid = 2;
      case 2: {
        if (tag == 16) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_TerminateGamePersonalDataEntries_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_TerminateGamePersonalDataEntries_Request)
  return false;
#undef DO_
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 steamid = 2;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_TerminateGamePersonalDataEntries_Request)
}

::google::protobuf::uint8* CCommunity_TerminateGamePersonalDataEntries_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 steamid = 2;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_TerminateGamePersonalDataEntries_Request)
  return target;
}

int CCommunity_TerminateGamePersonalDataEntries_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_TerminateGamePersonalDataEntries_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_TerminateGamePersonalDataEntries_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Request::MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_TerminateGamePersonalDataEntries_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Request::IsInitialized() const {

  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::Swap(CCommunity_TerminateGamePersonalDataEntries_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_TerminateGamePersonalDataEntries_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_TerminateGamePersonalDataEntries_Request_descriptor_;
  metadata.reflection = CCommunity_TerminateGamePersonalDataEntries_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCommunity_TerminateGamePersonalDataEntries_Response::kGceresultFieldNumber;
#endif  // !_MSC_VER

CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_TerminateGamePersonalDataEntries_Response)
}

void CCommunity_TerminateGamePersonalDataEntries_Response::InitAsDefaultInstance() {
}

CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(const CCommunity_TerminateGamePersonalDataEntries_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCommunity_TerminateGamePersonalDataEntries_Response)
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SharedCtor() {
  _cached_size_ = 0;
  gceresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_TerminateGamePersonalDataEntries_Response::~CCommunity_TerminateGamePersonalDataEntries_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_TerminateGamePersonalDataEntries_Response)
  SharedDtor();
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_TerminateGamePersonalDataEntries_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_;
}

const CCommunity_TerminateGamePersonalDataEntries_Response& CCommunity_TerminateGamePersonalDataEntries_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CCommunity_TerminateGamePersonalDataEntries_Response* CCommunity_TerminateGamePersonalDataEntries_Response::default_instance_ = NULL;

CCommunity_TerminateGamePersonalDataEntries_Response* CCommunity_TerminateGamePersonalDataEntries_Response::New() const {
  return new CCommunity_TerminateGamePersonalDataEntries_Response;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::Clear() {
  gceresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_TerminateGamePersonalDataEntries_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gceresult = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gceresult_)));
          set_has_gceresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_TerminateGamePersonalDataEntries_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_TerminateGamePersonalDataEntries_Response)
  return false;
#undef DO_
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  // optional uint32 gceresult = 1;
  if (has_gceresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gceresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_TerminateGamePersonalDataEntries_Response)
}

::google::protobuf::uint8* CCommunity_TerminateGamePersonalDataEntries_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  // optional uint32 gceresult = 1;
  if (has_gceresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gceresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_TerminateGamePersonalDataEntries_Response)
  return target;
}

int CCommunity_TerminateGamePersonalDataEntries_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gceresult = 1;
    if (has_gceresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gceresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_TerminateGamePersonalDataEntries_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_TerminateGamePersonalDataEntries_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Response::MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gceresult()) {
      set_gceresult(from.gceresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_TerminateGamePersonalDataEntries_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Response::IsInitialized() const {

  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::Swap(CCommunity_TerminateGamePersonalDataEntries_Response* other) {
  if (other != this) {
    std::swap(gceresult_, other->gceresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_TerminateGamePersonalDataEntries_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_TerminateGamePersonalDataEntries_Response_descriptor_;
  metadata.reflection = CCommunity_TerminateGamePersonalDataEntries_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
